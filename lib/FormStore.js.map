{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 93b0c9cec1187f6293ae","webpack:///./src/FormStore.js","webpack:///./~/node-libs-browser/~/process/browser.js","webpack:///external \"mobx\""],"names":["DEFAULT_SERVER_ERROR_MESSAGE","isSame","val1","val2","Date","valueOf","observableChanged","change","store","dataChanges","set","name","newValue","get","dataServer","delete","processSaveResponse","updates","response","options","log","status","errorFields","error","serverError","Object","assign","dataErrors","keys","concat","error_field","forEach","field","autoSaveInterval","data","value","key","afterSave","handleError","err","server","errorMessage","logError","FormStore","idProperty","minRefreshInterval","noop","console","bind","isReadOnly","isReady","undefined","create","beforeRefresh","afterRefresh","beforeSave","lastSync","saveQueue","Promise","resolve","Error","map","storeDataChanged","observeDisposer","clear","length","save","skipPropertyBeingEdited","keepServerError","reset","propertyBeingEdited","Array","isArray","hasChanges","validated","prop","temporaryDataErrors","setErrorFields","currentDataFields","temp","now","past","isLoading","result","saveOptions","allowCreate","saveAll","then","toJS","property","isSaving","saveNotification","active","errors","getFieldErrors","tempData","find","push","isInProgress","canSave","size"],"mappings":"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AAMC,WAAN,CAAkB2F;AALnB,QAAf;AAOA,WAAI,OAAO5F,MAAMW,OAAN,CAAc8B,UAArB,KAAoC,UAAxC,EAAoD;AAClD5B,gBAAO4B,UAAP,GAAoBzC,MAAMW,OAAN,CAAc8B,UAAd,CAAyB5B,MAAzB,CAApB;AACD,QAFD,MAEO;AACLA,gBAAO4B,UAAP,GAAoBzC,MAAMW,OAAN,CAAc8B,UAAlC;AACD;AACD,cAAO5B,MAAP;AACD;;;;;;;YA5KqB,K;;;;;YAEE,K;;;;;YAED,K;;;;;YAEG,I;;;;;YASP,E;;;;;YAEM,E;;;;;YAIM,EAAEuE,QAAQ,KAAV,EAAiBvE,QAAQ,IAAzB,E;;;;;YACG,I;;;mBAyVrBsB,S;;;;;;;;ACrgBf;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,MAAK;AACL;AACA;AACA,EAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,wBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sCAAqC;;AAErC;AACA;AACA;;AAEA,4BAA2B;AAC3B;AACA;AACA;AACA,6BAA4B,UAAU;;;;;;;ACvLtC,gD","file":"FormStore.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"mobx\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"FormStore\", [\"mobx\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"FormStore\"] = factory(require(\"mobx\"));\n\telse\n\t\troot[\"FormStore\"] = factory(root[\"mobx\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_2__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 93b0c9cec1187f6293ae","import { observable, observe, autorunAsync, action, computed, asMap } from 'mobx';\n\nconst DEFAULT_SERVER_ERROR_MESSAGE = 'Lost connection to server';\n\nfunction isSame(val1, val2) {\n  /* eslint-disable eqeqeq */\n  return val1 == val2 || (val1 instanceof Date && val2 instanceof Date && val1.valueOf() == val2.valueOf());\n  /* eslint-enable eqeqeq */\n}\n\n/**\n * Observes data and if changes come, add them to dataChanges,\n * unless it resets back to dataServer value, then clear that change\n * @this {FormStore}\n * @param {Object} change\n * @param {String} change.name - name of property that changed\n * @param {*} change.newValue\n */\nfunction observableChanged(change) {\n  const store = this;\n  action(() => {\n    store.dataChanges.set(change.name, change.newValue);\n\n    if (store.isSame(store.dataChanges.get(change.name), store.dataServer[change.name])) {\n      store.dataChanges.delete(change.name);\n    }\n  })();\n}\n/**\n * Records successfully saved data as saved\n * and reverts fields server indicates to be in error\n * @param {FormStore} store\n * @param {Object} updates - what we sent to the server\n * @param {Object} response\n * @param {String} [response.data] - optional updated data to merge into the store (server.create can return id here)\n * @param {String} [response.status] - 'error' indicates one or more fields were invalid and not saved.\n * @param {String|Object} [response.error] - either a single error message to show to user if string or field-specific error messages if object\n * @param {String|Array} [response.error_field] - name of the field (or array of field names) in error\n * If autoSave is enabled, any field in error_field for which there is no error message in response.error will be reverted\n * to prevent autoSave from endlessly trying to save the changed field.\n * @returns response.status\n */\nasync function processSaveResponse(store, updates, response) {\n  store.options.log(`[${store.options.name}] Response received from server.`);\n\n  if (response.status === 'error') {\n    action(() => {\n      let errorFields = [];\n      if (response.error) {\n        if (typeof response.error === 'string') {\n          store.serverError = response.error;\n        } else {\n          Object.assign(store.dataErrors, response.error);\n          errorFields = Object.keys(response.error);\n        }\n      }\n\n      // Supports an array of field names in error_field or a string\n      errorFields = errorFields.concat(response.error_field);\n      errorFields.forEach((field) => {\n        if (store.options.autoSaveInterval && !store.dataErrors[field] && store.isSame(updates[field], store.data[field])) {\n          store.data[field] = store.dataServer[field]; // revert or it'll keep trying to autosave it\n        }\n        delete updates[field]; // don't save it as the new dataServer value\n      });\n    })();\n  } else {\n    store.serverError = null;\n  }\n\n  Object.assign(store.dataServer, updates);\n\n  action(() => {\n    if (response.data) {\n      Object.assign(store.dataServer, response.data);\n      Object.assign(store.data, response.data);\n    }\n\n    store.dataChanges.forEach((value, key) => {\n      if (store.isSame(value, store.dataServer[key])) {\n        store.dataChanges.delete(key);\n      }\n    });\n  })();\n\n  if (typeof store.options.afterSave === 'function') {\n    await store.options.afterSave(store, updates, response);\n  }\n\n  return response.status;\n}\n\n/**\n * @param {FormStore} store\n * @param {Error} err\n */\nfunction handleError(store, err) {\n  if (typeof store.options.server.errorMessage === 'function') {\n    store.serverError = store.options.server.errorMessage(err);\n  } else {\n    store.serverError = store.options.server.errorMessage;\n  }\n\n  store.options.logError(err);\n}\n\nclass FormStore {\n  /** @private */\n  options = {\n    name: 'FormStore', // used in log statements\n    idProperty: null,\n    autoSaveInterval: 0, // in ms\n    minRefreshInterval: 0, // in ms\n    log: function noop() {},\n    logError: console.error.bind(console), // eslint-disable-line\n    /** @type {Boolean|function(object): Boolean} passed status object */\n    isReadOnly: (status) => !status.isReady,\n    server: {\n      /** @type {undefined|function: Promise|Object} - MUST resolve to an object with all data properties present even if all have null values */\n      get: undefined,\n      /** @type {undefined|function(object): Promise|Object} passed updates object - see processSaveResponse for expected error response properties */\n      set: undefined,\n      /** @type {undefined|function(object}: Promise|Object} passed updates object - see processSaveResponse for expected error response properties */\n      create: undefined,\n      /** @type {String|function(error): String} passed error object */\n      errorMessage: DEFAULT_SERVER_ERROR_MESSAGE,\n    },\n    /** @type {undefined|function(FormStore): Promise|Boolean} passed store instance - if it returns false, no refresh will be performed */\n    beforeRefresh: undefined,\n    /** @type {undefined|function(FormStore): Promise} passed store instance */\n    afterRefresh: undefined,\n    /** @type {undefined|function(FormStore, object, object): Promise|Boolean} passed store instance, updates object and saveOptions object,\n     * (i.e. with skipPropertyBeingEdited, etc booleans) - if it returns false, no save will be performed */\n    beforeSave: undefined,\n    /** @type {undefined|function(FormStore, object, object): Promise} passed store instance, updates object and response object\n     * - updates object will already have fields removed from it that response indicates are in error */\n    afterSave: undefined,\n  };\n\n  /**\n   * @private\n   * @type {null|Date}\n   */\n  lastSync = null;\n  /** @private */\n  saveQueue = Promise.resolve();\n  /** @private */\n  observeDisposer;\n\n  /** @private */\n  @observable isReady = false; // true after initial data load (refresh) has completed\n  /** @private */\n  @observable isLoading = false;\n  /** @private */\n  @observable isSaving = false;\n  /** @private */\n  @observable serverError = null; // stores both communication error and any explicit response.error returned to save\n\n  /** @private */\n  // To support both Mobx 2.2+ and 3.x, this is now done in constructor:\n  // @observable dataChanges = asMap(); // changes that will be sent to server\n\n  /** @private */\n  dataServer = {}; // data returned by the server (kept for checking old values)\n\n  @observable data = {};\n  // stores validation error message if any for each field (data structure is identical to data)\n  @observable dataErrors = {};\n  // active is set to true right after a save is completed and status is set to response.status\n  // this allows a confirmation message to be shown to user and to drive its dismissal,\n  // UI can set this observable's active property back to false.\n  @observable saveNotification = { active: false, status: null };\n  @observable propertyBeingEdited = null; // property currently being edited as set by startEditing()\n\n  isSame = isSame;\n\n  constructor(options, data) {\n    const store = this;\n    Object.assign(store.options, options);\n    if (!data && typeof store.options.server.get !== 'function') {\n      throw new Error('options must specify server get function or supply initial data object to constructor');\n    }\n    if (!typeof store.options.server.create !== 'function' && typeof store.options.server.set !== 'function') {\n      throw new Error('options must specify server set and/or create function(s)');\n    }\n    store.options.server.errorMessage = store.options.server.errorMessage || DEFAULT_SERVER_ERROR_MESSAGE;\n\n    // Supports both Mobx 3.x (observable.map) and 2.x+ (asMap) without deprecation warnings:\n    this.dataChanges = observable.map ? observable.map() : asMap(); // changes that will be sent to server\n\n    // register observe for changes to properties in store.data as well as to complete replacement of store.data object\n    const storeDataChanged = observableChanged.bind(store);\n    store.observeDisposer = observe(store.data, storeDataChanged);\n    observe(store, 'data', () => {\n      store.observeDisposer && store.observeDisposer();\n      store.observeDisposer = observe(store.data, storeDataChanged);\n\n      store.dataChanges.clear();\n      action(() => {\n        Object.keys(store.data).forEach((key) => {\n          const value = store.data[key];\n          if (!store.isSame(value, store.dataServer[key])) {\n            store.dataChanges.set(key, value);\n          }\n        });\n      })();\n    });\n\n    // auto-save by observing dataChanges keys\n    if (store.options.autoSaveInterval) {\n      autorunAsync(() => {\n        if ((!store.options.idProperty || this.data[store.options.idProperty]) && this.dataChanges.keys().length) {\n          store.options.log(`[${store.options.name}] Auto-save started...`);\n\n          store.save({ skipPropertyBeingEdited: true, keepServerError: true });\n        }\n      }, store.options.autoSaveInterval);\n    }\n\n    if (data) {\n      store.dataServer = data;\n      store.reset();\n      store.isReady = true;\n    }\n  }\n\n  /**\n   * Marks data property as edit-in-progress and therefore it should not be autosaved - to be called on field focus\n   * @param {String|Array} name - field/property name (Array format supports json schema forms)\n   */\n  startEditing(name) {\n    const store = this;\n    store.propertyBeingEdited = Array.isArray(name) ? name[0] : name;\n  }\n\n  // to be called on field blur, any field name parameter is ignored\n  stopEditing() {\n    const store = this;\n    store.propertyBeingEdited = null;\n    if (store.status.hasChanges) {\n      // This will trigger autorun in case it already ran while we were editing:\n      action(() => {\n        const key = store.dataChanges.keys()[0];\n        const value = store.dataChanges.get(key);\n        store.dataChanges.delete(key);\n        store.dataChanges.set(key, value);\n      })();\n    }\n  }\n\n  /**\n   * Returns the value of a field/property, optionally returning the last saved value for not validated/in progress fields\n   * Without validated:true, using this function is not necessary, can just access store.data[name].\n   * @param {String|Array} name - field/property name (Array format supports json schema forms)\n   * @param {Boolean} [validated] - only return validated value, i.e. if it's in error, fallback to dataServer\n   * @param {Boolean} [skipPropertyBeingEdited] - used only when validated is true to again fallback to dataServer\n   * @returns {*}\n   */\n  getValue(name, validated, skipPropertyBeingEdited) {\n    const store = this;\n    const prop = Array.isArray(name) ? name[0] : name;\n    if (validated) {\n      // check if property is being edited or invalid\n      if ((skipPropertyBeingEdited && prop === store.propertyBeingEdited) || store.dataErrors[prop]) {\n        return store.dataServer[prop];\n      }\n    }\n    return store.data[prop];\n  }\n\n  // Returns the last saved (or server-provided) set of data\n  // - in an afterSave callback it already includes merged updates that were not in error\n  getSavedData() {\n    const store = this;\n    return store.dataServer;\n  }\n\n  /**\n   * @returns {{errors: Array<String>, isReady: Boolean, isInProgress: Boolean, canSave: Boolean, hasChanges: Boolean, isReadOnly: Boolean}}\n   * errors is an array of any serverError plus all the error messages from all fields (in no particular order)\n   * (serverError is either the string returned in response.error or a communication error and is cleared on every refresh and save)\n   * isReady indicates initial data load (refresh) has been completed and user can start entering data\n   * isInProgress indicates either a refresh or a save is in progress\n   * canSave is true when no refresh or save is in progress and there are no validation errors\n   * hasChanges is true when one or more data properties has a value that's different from last-saved/server-loaded data.\n   * isReadOnly by default is true when isReady is false but can be set to the return value of an\n   *            optional callback to which this status object (without isReadOnly) is passed\n   */\n  @computed get status() {\n    const store = this;\n    let errors = [];\n\n    if (store.serverError) {\n      errors = [store.serverError];\n    }\n\n    const getFieldErrors = (tempData) => {\n      return Object.keys(tempData).find((key) => {\n        if (tempData[key] && typeof tempData[key] === 'object') {\n          return getFieldErrors(tempData[key]);\n        } \n        if (tempData[key]) {\n          errors.push(tempData[key]);\n        }\n        return tempData[key];\n      });\n    };\n    getFieldErrors(store.dataErrors);\n\n    const status = {\n      errors,\n      isReady: store.isReady,\n      isInProgress: store.isLoading || store.isSaving,\n      canSave: !store.isLoading && !store.isSaving && (store.serverError ? errors.length === 1 : errors.length === 0),\n      hasChanges: !!store.dataChanges.size,\n    };\n    if (typeof store.options.isReadOnly === 'function') {\n      status.isReadOnly = store.options.isReadOnly(status);\n    } else {\n      status.isReadOnly = store.options.isReadOnly;\n    }\n    return status;\n  }\n\n  /**\n   * Copies dataServer into data and resets the error observable.\n   * Mostly for internal use by refresh().\n   * @param {Object} [data] Optionally set store.data to this object instead of copying dataServer\n   */\n  reset(data) {\n    const store = this;\n\n    action(() => {\n      store.data = data || Object.assign({}, store.dataServer);\n\n      // setup error observable\n      const temporaryDataErrors = {};\n      const setErrorFields = (currentDataFields, temp) => {\n        Object.keys(currentDataFields).forEach((key) => {\n          if (currentDataFields[key] && typeof currentDataFields[key] === 'object') {\n            temp[key] = {};\n            return setErrorFields(currentDataFields[key], temp[key]);\n          }\n          temp[key] = null;\n          return temp[key];\n        });\n      };\n      setErrorFields(store.data, temporaryDataErrors);\n      store.dataErrors = temporaryDataErrors;\n    })();\n  }\n\n  /**\n   * Loads data from server unless a refresh was performed within the last minRefreshInterval (i.e. 15 minutes).\n   * If there are pending (and ready to save) changes, triggers save instead and 'resets the clock' on minRefreshInterval.\n   * For a store with idProperty defined, if that data property is falsy, loads from server only the very first time refresh() is called.\n   * @returns {Promise|Boolean} resolves to true if refresh actually performed, false if skipped\n   */\n  async refresh() {\n    const store = this;\n    if (!store.options.server.get || (store.isReady && store.options.idProperty && !store.data[store.options.idProperty])) {\n      return false;\n    }\n    store.options.log(`[${store.options.name}] Starting data refresh...`);\n    const now = new Date();\n    const past = new Date(Date.now() - store.options.minRefreshInterval);\n\n    // check if lastSync is between now and 15 minutes ago\n    if (past < store.lastSync && store.lastSync < now) {\n      store.options.log(`[${store.options.name}] Data refreshed within last ${store.options.minRefreshInterval / 1000} seconds.`);\n      return false;\n    }\n\n    if (store.status.hasChanges && (!store.options.idProperty || store.data[store.options.idProperty])) {\n      store.options.log(`[${store.options.name}] Unsaved changes detected...`);\n\n      if (await store.save()) {\n        store.options.log(`[${store.options.name}] Postponing refresh for ${store.options.minRefreshInterval / 1000} seconds.`);\n        store.lastSync = new Date();\n        return false;\n      }\n    }\n\n    if (typeof store.options.beforeRefresh === 'function') {\n      if (await store.options.beforeRefresh(store) === false) {\n        return false;\n      }\n    }\n\n    store.options.log(`[${store.options.name}] Refreshing data...`);\n    store.isLoading = true;\n\n    try {\n      const result = await store.options.server.get();\n      store.options.log(`[${store.options.name}] Data received from server.`);\n\n      action(() => {\n        store.dataServer = result;\n        store.serverError = null;\n        store.lastSync = new Date();\n        store.reset();\n      })();\n\n      if (typeof store.options.afterRefresh === 'function') {\n        await store.options.afterRefresh(store);\n      }\n\n      store.options.log(`[${store.options.name}] Refresh finished.`);\n      if (!store.isReady) store.isReady = true;\n    } catch (err) {\n      handleError(store, err);\n    }\n\n    store.isLoading = false;\n    return true;\n  }\n\n  /**\n   * Sends ready-to-save data changes to the server (normally using server.set unless it's undefined, then with server.create)\n   * For a store with idProperty defined when that property is falsy and allowCreate=true, uses server.create instead.\n   * Calls to save() while one is in progress are queued.\n   * @param {Object} saveOptions - the object as a whole is also passed to the beforeSave callback\n   * @param {Boolean} [saveOptions.allowCreate=false] - for a store with idProperty defined, this must be true\n   *                                                    for the save to actually be performed when that property is falsy.\n   * @param {Boolean} [saveOptions.saveAll=false] - normally save only sends changes and if no changes, no save is done.\n   *                                                if saveAll=true, sends the full data object regardless of changes.\n   * @param {Boolean} [saveOptions.skipPropertyBeingEdited=false] - true in an auto-save\n   * @param {Boolean} [saveOptions.keepServerError=false] - true in an auto-save\n   * @returns {Promise|Boolean} resolves to true if save actually performed, false if skipped\n   */\n  save(saveOptions = {}) {\n    const { allowCreate = false, saveAll = false, skipPropertyBeingEdited = false, keepServerError = false } = saveOptions;\n    const store = this;\n\n    store.saveQueue = store.saveQueue.then(\n      async () => {\n        if (store.options.idProperty && !store.data[store.options.idProperty] && !allowCreate) {\n          return false;\n        }\n        store.options.log(`[${store.options.name}] Starting data save...`);\n\n        let updates;\n        if (saveAll) {\n          updates = Object.assign({}, store.data);\n        } else {\n          updates = store.dataChanges.toJS();\n\n          if (Object.keys(updates).length === 0) {\n            store.options.log(`[${store.options.name}] No changes to save.`);\n            return false;\n          }\n\n          // check if we have property currently being edited in changes\n          // or if a property has an error\n          Object.keys(updates).forEach((property) => {\n            if (skipPropertyBeingEdited && property === store.propertyBeingEdited) {\n              store.options.log(`[${store.options.name}] Property \"${property}\" is being edited.`);\n              delete updates[property];\n            }\n\n            if (store.dataErrors[property]) {\n              store.options.log(`[${store.options.name}] Property \"${property}\" is not validated.`);\n              delete updates[property];\n            }\n\n            if (store.isSame(updates[property], store.dataServer[property])) {\n              store.options.log(`[${store.options.name}] Property \"${property}\" is same as on the server.`);\n              delete updates[property];\n              store.dataChanges.delete(property);\n            }\n          });\n\n          if (Object.keys(updates).length === 0) {\n            store.options.log(`[${store.options.name}] No changes ready to save.`);\n            return false;\n          }\n        }\n\n        if (typeof store.options.beforeSave === 'function') {\n          if (await store.options.beforeSave(store, updates, saveOptions) === false) {\n            return false;\n          }\n        }\n\n        store.options.log(`[${store.options.name}] Saving data...`);\n        store.options.log(updates);\n        store.isSaving = true;\n\n        try {\n          if (!keepServerError) {\n            store.serverError = null;\n          }\n\n          let response;\n          if (store.options.server.set && (!store.options.idProperty || !store.options.server.create || store.data[store.options.idProperty])) {\n            response = await store.options.server.set(updates);\n          } else {\n            response = await store.options.server.create(updates);\n          }\n\n          store.saveNotification.status = await processSaveResponse(store, updates, response);\n          store.saveNotification.active = true;\n\n          store.options.log(`[${store.options.name}] Save finished.`);\n        } catch (err) {\n          handleError(store, err);\n        }\n\n        store.isSaving = false;\n        return true;\n      }\n    );\n\n    return store.saveQueue;\n  }\n}\n\nexport default FormStore;\n\n\n\n// WEBPACK FOOTER //\n// ./src/FormStore.js","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/node-libs-browser/~/process/browser.js\n// module id = 1\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"mobx\"\n// module id = 2\n// module chunks = 0"],"sourceRoot":""}